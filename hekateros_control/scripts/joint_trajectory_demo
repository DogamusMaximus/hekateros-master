#! /usr/bin/env python
## 
## Demonstrate Hekateros' capabilities by executing a canned trajectory motion
##

import roslib; roslib.load_manifest('hekateros_control')
import rospy

import actionlib
import control_msgs.msg
import trajectory_msgs.msg

def hek_demo():
    client = actionlib.SimpleActionClient( 
            'hekateros_control/follow_joint_traj_as', 
            control_msgs.msg.FollowJointTrajectoryAction)

    print "Waiting for action server"
    client.wait_for_server()
    print "Connected"

    joint_traj = trajectory_msgs.msg.JointTrajectory()

    joint_traj.joint_names.insert(1,'shoulder')
    joint_traj.joint_names.insert(2,'elbow')
    joint_traj.joint_names.insert(3,'wrist_pitch')
    joint_traj.joint_names.insert(4,'wrist_rot')
    joint_traj.joint_names.insert(5,'grip')

    jtp1 = trajectory_msgs.msg.JointTrajectoryPoint()
    jtp1.positions.insert(1,-0.1); jtp1.velocities.insert(2, 2)
    jtp1.positions.insert(2, 0.2); jtp1.velocities.insert(2, 2)
    jtp1.positions.insert(3,-0.2); jtp1.velocities.insert(2, 50)
    jtp1.positions.insert(4, 1.6); jtp1.velocities.insert(1, 50)
    jtp1.positions.insert(5, 0.4); jtp1.velocities.insert(0, 10)

    jtp2 = trajectory_msgs.msg.JointTrajectoryPoint()
    jtp2.positions.insert(1, 0.1); jtp2.velocities.insert(2, 2)
    jtp2.positions.insert(2,-0.2); jtp2.velocities.insert(2, 2)
    jtp2.positions.insert(3, 0.2); jtp2.velocities.insert(2, 50)
    jtp2.positions.insert(4,-1.6); jtp2.velocities.insert(1, 50)
    jtp2.positions.insert(5, 0.4); jtp2.velocities.insert(0, 10)
    
    jtp3 = trajectory_msgs.msg.JointTrajectoryPoint()
    jtp3.positions.insert(1, 0.0); jtp3.velocities.insert(2, 2)
    jtp3.positions.insert(2, 0.0); jtp3.velocities.insert(2, 2)
    jtp3.positions.insert(3, 0.0); jtp3.velocities.insert(2, 50)
    jtp3.positions.insert(4, 0.0); jtp3.velocities.insert(1, 50)
    jtp3.positions.insert(5, 0.0); jtp3.velocities.insert(0, 10)

    joint_traj.points.insert(0,jtp1)
    joint_traj.points.insert(1,jtp2)
    joint_traj.points.insert(2,jtp3)

    print joint_traj

    goal = control_msgs.msg.FollowJointTrajectoryGoal()
    goal.trajectory = joint_traj

    # Sends the goal to the action server.
    print "Sending FollowJointTrajectoryGoal"
    client.send_goal(goal)

    # Waits for the server to finish performing the action.
    print "Waiting for result"
    client.wait_for_result()
    print "Done!"

    # Prints out the result of executing the action
    return client.get_result()

if __name__ == '__main__':
    try:
        rospy.init_node('joint_traj_client')
        result = hek_demo()

    except rospy.ROSInterruptException:
        print "program interrupted before completion"
